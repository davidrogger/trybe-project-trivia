{"version":3,"sources":["trivia.png","redux/actions/index.js","redux/reducers/player.js","redux/actions/trivia.js","redux/reducers/token.js","redux/reducers/settings.js","redux/reducers/questions.js","redux/reducers/timer.js","redux/reducers/index.js","redux/store/index.js","components/Loading.js","pages/Login.js","components/HeaderPlay.js","components/QuestionCard.js","components/Questions.js","components/Timer.js","pages/GameBoard.js","pages/Settings.js","pages/Feedback.js","pages/Ranking.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","actionColorUpdate","colorAnswer","type","INITIAL_STATE","name","assertions","score","gravatarEmail","player","state","action","gravatarURL","hash","playerName","actionGetToken","data","getApiQuestions","token","quantity","a","fetch","response","json","console","log","settings","questionsData","questions","count","stopTimer","timer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","Loading","className","Component","Login","props","inputValidation","email","emailTest","test","nameTest","length","setState","disableBtn","loadingBtn","status","login","inputHandler","target","value","loadingPlayerData","savePlayerData","md5","toString","playBtn","getNewToken","savedToken","saveQuestions","history","push","settingsBtn","this","src","logo","alt","data-testid","placeholder","onChange","disabled","onClick","size","weight","connect","dispatch","actionGetPlayerData","getQuestions","HeaderPlay","img","QuestionCard","difficultyHandler","difficulty","scoreHandler","answer","currentQuestion","sendScore","breakTime","answerHandler","updateColor","correctAnswer","answers","shuffleAnswer","incorrectAnswers","clickedAnswer","map","incorrectIndex","indexOf","classLabel","dataTestLabel","key","escapeHtml","str","replace","correct_answer","incorrect_answers","category","question","actionScore","actionAddCorrectAnswer","Questions","answerScrambler","scrambledAnswers","results","shuffleAnswers","nextHandler","indexPosition","resetTime","prevState","sort","Math","random","Timer","startTimer","timerId","setInterval","countdown","changeTimer","clearInterval","undefined","time","actionChangeTimer","GameBoard","Settings","Feedback","getPlayerInfo","totalScore","playerInfoData","image","rankingData","JSON","parse","localStorage","getItem","setItem","stringify","resetStore","resetToken","resetQuestions","resetScore","playAgain","redirectLogin","goToRanking","redirectRanking","correctAnswers","to","Ranking","loadingFinalRanking","recoverRanking","b","infoRanking","index","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5001ad5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","export const GET_PLAYER_DATA = 'GET_PLAYER_DATA';\nexport const CHANGE_TIMER = 'CHANGE_TIMER';\nexport const GET_SCORE = 'GET_SCORE';\nexport const STOP_TIMER = 'STOP_TIMER';\nexport const RESET_TIMER = 'RESET_TIMER';\nexport const CHANGE_COLOR_BTN = 'CHANGE_COLOR_BTN';\nexport const ADD_CORRECT_ANSWER = 'ADD_CORRECT_ANSWER';\nexport const RESET_TOKEN = 'RESET_TOKEN';\nexport const RESET_QUESTIONS = 'RESET_QUESTIONS';\nexport const RESET_SCORE = 'RESET_SCORE';\n\nexport const actionGetPlayerData = (playerName, hash) => ({\n  type: GET_PLAYER_DATA,\n  playerName,\n  hash,\n});\n\nexport const actionChangeTimer = (time) => ({\n  type: CHANGE_TIMER,\n  time,\n});\n\nexport const actionScore = (score) => ({\n  type: GET_SCORE,\n  score,\n});\n\nexport const actionStopTimer = () => ({\n  type: STOP_TIMER,\n});\n\nexport const actionResetTimer = () => ({\n  type: RESET_TIMER,\n});\n\nexport const actionColorUpdate = (colorAnswer) => ({\n  type: CHANGE_COLOR_BTN,\n  colorAnswer,\n});\n\nexport const actionAddCorrectAnswer = (answer) => ({\n  type: ADD_CORRECT_ANSWER,\n  answer,\n});\n\nexport const actionResetToken = () => ({\n  type: RESET_TOKEN,\n});\n\nexport const actionResetQuestions = () => ({\n  type: RESET_QUESTIONS,\n});\n\nexport const actionResetScore = () => ({\n  type: RESET_SCORE,\n});\n","import { GET_PLAYER_DATA, GET_SCORE, ADD_CORRECT_ANSWER, RESET_SCORE } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_PLAYER_DATA: {\n    const gravatarURL = `https://www.gravatar.com/avatar/${action.hash}`;\n    return {\n      ...state,\n      name: action.playerName,\n      gravatarEmail: gravatarURL,\n    };\n  }\n  case GET_SCORE:\n    return {\n      ...state,\n      score: state.score + action.score,\n    };\n  case ADD_CORRECT_ANSWER:\n    return {\n      ...state,\n      assertions: state.assertions + 1,\n    };\n  case RESET_SCORE:\n    return {\n      ...state,\n      score: 0,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","export const GET_TOKEN = 'GET_TOKEN';\nexport const GET_QUESTIONS = 'GET_QUESTIONS';\n\nexport const actionGetToken = (data) => ({\n  type: GET_TOKEN,\n  data,\n});\n\nexport const actionGetQuestions = (data) => ({\n  type: GET_QUESTIONS,\n  data,\n});\n\nexport const getApiToken = () => async (dispatch) => {\n  try {\n    const response = await fetch('https://opentdb.com/api_token.php?command=request');\n    const data = await response.json();\n    dispatch(actionGetToken(data));\n    return data.token;\n  } catch (error) {\n    console.log(`Erro encontrado Token API: ${error}`);\n  }\n};\n\nexport const getApiQuestions = async (token, quantity) => {\n  try {\n    const response = await fetch(`https://opentdb.com/api.php?amount=${quantity}&token=${token}`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(`Erro encontrado Token API: ${error}`);\n  }\n};\n\nexport const getQuestions = (token, quantity) => async (dispatch) => {\n  const questions = await getApiQuestions(token, quantity);\n  dispatch(actionGetQuestions(questions));\n};\n","import { GET_TOKEN } from '../actions/trivia';\nimport { RESET_TOKEN } from '../actions';\n\nconst INITIAL_STATE = '';\n\nconst token = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_TOKEN:\n    return action.data.token;\n  case RESET_TOKEN:\n    return '';\n  default:\n    return state;\n  }\n};\n\nexport default token;\n","const INITIAL_STATE = {\n  quantity: 5,\n};\n\nconst settings = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  default:\n    return state;\n  }\n};\n\nexport default settings;\n","import { GET_QUESTIONS } from '../actions/trivia';\nimport { CHANGE_COLOR_BTN, RESET_QUESTIONS } from '../actions';\n\nconst INITIAL_STATE = {\n  questionsData: {},\n  colorAnswer: false,\n};\n\nconst questions = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_QUESTIONS:\n    return {\n      ...state,\n      questionsData: action.data,\n    };\n  case CHANGE_COLOR_BTN:\n    return {\n      ...state,\n      colorAnswer: action.colorAnswer,\n    };\n  case RESET_QUESTIONS:\n    return {\n      ...state,\n      questionsData: {},\n      colorAnswer: false,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default questions;\n","import { CHANGE_TIMER, STOP_TIMER, RESET_TIMER } from '../actions';\n\nconst INITIAL_STATE = {\n  count: 30,\n  stopTimer: false,\n};\n\nconst timer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case CHANGE_TIMER:\n    return {\n      ...state,\n      count: state.count - 1,\n    };\n  case STOP_TIMER:\n    return {\n      ...state,\n      stopTimer: true,\n    };\n  case RESET_TIMER:\n    return {\n      ...state,\n      stopTimer: false,\n      count: 30,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default timer;\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport token from './token';\nimport settings from './settings';\nimport questions from './questions';\nimport timer from './timer';\n\nconst rootReducer = combineReducers({\n  player,\n  token,\n  settings,\n  questions,\n  timer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"loading-container\"> </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\n\nimport { connect } from 'react-redux';\nimport { Play, Gear } from 'phosphor-react';\nimport { actionGetPlayerData } from '../redux/actions';\nimport { getApiToken, getQuestions } from '../redux/actions/trivia';\n\nimport logo from '../trivia.png';\n\n// Estilo\nimport '../styles/login.css';\n\nimport Loading from '../components/Loading';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      email: '',\n      disableBtn: true,\n      login: false,\n    };\n  }\n\n  inputValidation = () => {\n    const { name, email } = this.state;\n\n    const regex = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g; // fonte regex https://regexr.com/3e48o\n    const emailTest = regex.test(email);\n    const nameTest = name.length;\n\n    this.setState({\n      disableBtn: !(emailTest && nameTest),\n    });\n  }\n\n  loadingBtn = (status) => {\n    this.setState({\n      login: status,\n    });\n  }\n\n  inputHandler = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value }, () => this.inputValidation());\n  }\n\n  loadingPlayerData = () => {\n    const { savePlayerData } = this.props;\n    const { name, email } = this.state;\n\n    const emailHash = md5(email).toString();\n    savePlayerData(name, emailHash);\n  }\n\n  playBtn = async () => {\n    const {\n      getNewToken, savedToken, quantity, saveQuestions, history,\n    } = this.props;\n\n    this.loadingBtn(true);\n    await saveQuestions(savedToken || await getNewToken(), quantity);\n    this.loadingPlayerData();\n    this.loadingBtn(false);\n    history.push('/gameboard');\n  }\n\n  settingsBtn = () => {\n    const { history } = this.props;\n    history.push('/settings');\n  }\n\n  render() {\n    const { name, email, disableBtn, login } = this.state;\n    return (\n      <div className=\"login-container\">\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n        <div className=\"login-forms\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            data-testid=\"input-player-name\"\n            value={ name }\n            placeholder=\"Insert Player Name\"\n            onChange={ this.inputHandler }\n          />\n          <input\n            type=\"text\"\n            name=\"email\"\n            data-testid=\"input-gravatar-email\"\n            value={ email }\n            placeholder=\"Insert Player E-mail\"\n            onChange={ this.inputHandler }\n          />\n          <div className=\"login-buttons\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-play\"\n              disabled={ disableBtn }\n              onClick={ this.playBtn }\n            >\n              { !login ? <Play size={ 20 } weight=\"fill\" /> : <Loading />}\n            </button>\n            <button\n              type=\"button\"\n              data-testid=\"btn-settings\"\n              onClick={ this.settingsBtn }\n            >\n              <Gear size={ 20 } weight=\"fill\" />\n            </button>\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  savedToken: state.token,\n  quantity: state.settings.quantity,\n  questions: state.questions.questionsData,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getNewToken: () => dispatch(getApiToken()),\n  savePlayerData: (playerName, hash) => dispatch(actionGetPlayerData(playerName, hash)),\n  saveQuestions: (token, quantity) => dispatch(getQuestions(token, quantity)),\n});\n\nLogin.propTypes = {\n  tokenRequest: PropTypes.func,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n  savePlayerData: PropTypes.string,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass HeaderPlay extends Component {\n  render() {\n    const { name, img, score } = this.props;\n    return (\n      <div className=\"headerplay-container\">\n        <img\n          data-testid=\"header-profile-picture\"\n          src={ img }\n          alt={ `${name}-avatar` }\n        />\n        <p>\n          Player:\n          {' '}\n          <span\n            data-testid=\"header-player-name\"\n          >\n            {name}\n          </span>\n        </p>\n        <p>\n          Score:\n          {' '}\n          <span\n            data-testid=\"header-score\"\n          >\n            {score}\n          </span>\n        </p>\n      </div>\n    );\n  }\n}\n\nHeaderPlay.propTypes = {\n  name: PropTypes.string,\n  img: PropTypes.string,\n  score: PropTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  img: state.player.gravatarEmail,\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps)(HeaderPlay);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionScore,\n  actionStopTimer,\n  actionColorUpdate,\n  actionAddCorrectAnswer } from '../redux/actions';\n\nclass QuestionCard extends Component {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     clickedAnswer: false,\n  //   };\n  // }\n\n  difficultyHandler = (difficulty) => {\n    const hardPoint = 3;\n    const mediumPoint = 2;\n    const easyPoint = 1;\n\n    switch (difficulty) {\n    case 'hard':\n      return hardPoint;\n    case 'medium':\n      return mediumPoint;\n    default:\n      return easyPoint;\n    }\n  }\n\n  scoreHandler = (answer) => {\n    const { currentQuestion: { difficulty }, sendScore, timer, breakTime } = this.props;\n    if (answer === 'correctAnswer') {\n      const MIN_SCORE = 10;\n      const difficultyScale = this.difficultyHandler(difficulty);\n      const score = MIN_SCORE + (timer * difficultyScale);\n      sendScore(score);\n    }\n    breakTime();\n  }\n\n  answerHandler = (answer) => {\n    const { updateColor, correctAnswer } = this.props;\n    updateColor(true);\n    if (answer === 'correctAnswer') correctAnswer(answer);\n    this.scoreHandler(answer);\n  }\n\n  answers = (shuffleAnswer, correctAnswer, incorrectAnswers) => {\n    const { timer, clickedAnswer } = this.props;\n    return (\n      <div\n        data-testid=\"answer-options\"\n        className=\"answers-container\"\n      >\n        {shuffleAnswer.map((answer) => {\n          const incorrectIndex = incorrectAnswers.indexOf(answer);\n          const classLabel = answer === correctAnswer\n            ? 'correctAnswer'\n            : 'incorretAnswer';\n          const dataTestLabel = answer === correctAnswer\n            ? 'correct-answer'\n            : `wrong-answer-${incorrectIndex}`;\n          return (\n            <button\n              key={ answer }\n              type=\"button\"\n              disabled={ timer === 0 }\n              data-testid={ dataTestLabel }\n              className={ clickedAnswer ? classLabel : 'answers-standard-button' }\n              onClick={ () => this.answerHandler(classLabel) }\n            >\n              {this.escapeHtml(answer)}\n            </button>);\n        })}\n      </div>\n    );\n  }\n\n  // https://www.educative.io/edpresso/how-to-escape-unescape-html-characters-in-string-in-javascript\n  escapeHtml = (str) => str.replace(/&amp;/g, '&')\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>')\n    .replace(/&quot;/g, '\"')\n    .replace(/&#039;/g, '\\'')\n\n  render() {\n    const { currentQuestion: {\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers,\n      category, question }, shuffleAnswer } = this.props;\n    return (\n      <div className=\"question-container\">\n        <h2 data-testid=\"question-category\">{ category }</h2>\n        <h1 data-testid=\"question-text\">{ this.escapeHtml(question) }</h1>\n        {this.answers(shuffleAnswer, correctAnswer, incorrectAnswers)}\n      </div>\n    );\n  }\n}\n\nQuestionCard.propTypes = {\n  incorrect_answer: PropTypes.arrayOf(PropTypes.string),\n  correct_answers: PropTypes.string,\n  category: PropTypes.string,\n  question: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  timer: state.timer.count,\n  clickedAnswer: state.questions.colorAnswer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendScore: (score) => dispatch(actionScore(score)),\n  breakTime: () => dispatch(actionStopTimer()),\n  updateColor: (colorAnswer) => dispatch(actionColorUpdate(colorAnswer)),\n  correctAnswer: (answer) => dispatch(actionAddCorrectAnswer(answer)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionCard);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport QuestionCard from './QuestionCard';\nimport { actionResetTimer, actionColorUpdate } from '../redux/actions';\nimport '../styles/questions.css';\n\nclass Questions extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      indexPosition: 0,\n      scrambledAnswers: [],\n    };\n  }\n\n  componentDidMount() {\n    this.answerScrambler();\n  }\n\n  answerScrambler = () => {\n    const { questions: { results } } = this.props;\n    const scrambledAnswers = results.map((question) => this.shuffleAnswers(question));\n    this.setState({\n      scrambledAnswers,\n    });\n  }\n\n  nextHandler = () => {\n    const { indexPosition } = this.state;\n    const { questions: { results }, history, resetTime, updateColor } = this.props;\n    const MAX_LENGTH = results.length - 1;\n    if (indexPosition === MAX_LENGTH) {\n      history.push('/feedback');\n    } else {\n      resetTime();\n      updateColor(false);\n      this.setState((prevState) => ({\n        indexPosition: prevState.indexPosition + 1,\n      }));\n    }\n  }\n\n  shuffleAnswers = (currentQuestion) => {\n    const { correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers } = currentQuestion;\n    const SHUFFLE_NUMBER = 0.5;\n    return [correctAnswer, ...incorrectAnswers]\n      .sort(() => Math.random() - SHUFFLE_NUMBER); // https://flaviocopes.com/how-to-shuffle-array-javascript/\n  }\n\n  render() {\n    const { indexPosition, scrambledAnswers } = this.state;\n    const { questions: { results }, stopTimer } = this.props;\n    const currentQuestion = results[indexPosition];\n    const shuffleAnswer = scrambledAnswers[indexPosition];\n    const renderQuestion = scrambledAnswers.length !== 0;\n    return renderQuestion && (\n      <div className=\"main-container\">\n        <QuestionCard\n          currentQuestion={ currentQuestion }\n          shuffleAnswer={ shuffleAnswer }\n        />\n        { stopTimer && (\n          <button\n            type=\"button\"\n            data-testid=\"btn-next\"\n            className=\"nextBtn\"\n            onClick={ this.nextHandler }\n          >\n            Next\n          </button>\n        ) }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.questions.questionsData,\n  stopTimer: state.timer.stopTimer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetTime: () => dispatch(actionResetTimer()),\n  updateColor: (colorAnswer) => dispatch(actionColorUpdate(colorAnswer)),\n});\n\nQuestions.propTypes = {\n  dispatch: PropTypes.func,\n  quantity: PropTypes.number,\n  token: PropTypes.string,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionChangeTimer, actionStopTimer } from '../redux/actions';\n\nclass Timer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      timerId: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  componentDidUpdate() {\n    const { timerId } = this.state;\n    const { timer } = this.props;\n    const START_COUNT = 30;\n    if (timer === START_COUNT && !timerId) {\n      this.startTimer();\n    }\n  }\n\n  startTimer = () => {\n    const ONESECOND = 1000;\n    const timerId = setInterval(this.countdown, ONESECOND);\n    this.setState({\n      timerId,\n    });\n  }\n\n  countdown = () => {\n    const { timer, changeTimer, stopTimer, breakTime } = this.props;\n    const { timerId } = this.state;\n    if (timer === 0 || stopTimer) {\n      clearInterval(timerId);\n      breakTime();\n      this.setState({\n        timerId: undefined,\n      });\n    } else {\n      changeTimer();\n    }\n  }\n\n  render() {\n    const { timer } = this.props;\n    return (\n      <h1 className=\"timer-container\">{ timer }</h1>\n    );\n  }\n}\n\nTimer.propTypes = {\n  timer: PropTypes.string,\n}.isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  changeTimer: (time) => dispatch(actionChangeTimer(time)),\n  breakTime: () => dispatch(actionStopTimer()),\n});\n\nconst mapStateToProps = (state) => ({\n  timer: state.timer.count,\n  stopTimer: state.timer.stopTimer,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport HeaderPlay from '../components/HeaderPlay';\nimport Questions from '../components/Questions';\nimport Timer from '../components/Timer';\n\nimport '../styles/gameboard.css';\n\nclass GameBoard extends Component {\n  render() {\n    const { history } = this.props;\n    return (\n      <div className=\"gameboard-container\">\n        <HeaderPlay />\n        <Timer />\n        <Questions history={ history } />\n      </div>\n    );\n  }\n}\n\nGameBoard.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n}.isRequired;\n\nexport default GameBoard;\n","import React, { Component } from 'react';\n\nimport { Barricade } from 'phosphor-react';\n\n// Estilos\nimport '../styles/settings.css';\n\nclass Settings extends Component {\n  render() {\n    return (\n      <div className=\"settings-container\">\n        <div className=\"settings-forms\">\n          <h1 data-testid=\"settings-title\">Settings</h1>\n          <Barricade\n            className=\"settings-ico\"\n            size={ 150 }\n          />\n          Not Implemented yet\n        </div>\n      </div>\n    );\n  }\n}\n//\nexport default Settings;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport HeaderPlay from '../components/HeaderPlay';\nimport {\n  actionResetToken,\n  actionResetQuestions,\n  actionResetScore } from '../redux/actions';\n\nclass Feedback extends Component {\n  constructor() {\n    super();\n    this.state = {\n      redirectLogin: false,\n      redirectRanking: false,\n    };\n  }\n\n  componentDidMount() {\n    this.getPlayerInfo();\n  }\n\n  getPlayerInfo = () => {\n    const { totalScore, name, image } = this.props;\n    const playerInfoData = {\n      image,\n      name,\n      totalScore,\n    };\n    const rankingData = JSON.parse(localStorage.getItem('ranking')) || [];\n    localStorage.setItem('ranking', JSON.stringify([...rankingData, playerInfoData]));\n  };\n\n  resetStore = () => {\n    const { resetToken, resetQuestions, resetScore } = this.props;\n    resetToken();\n    resetQuestions();\n    resetScore();\n  }\n\n  playAgain = () => {\n    this.resetStore();\n    this.setState({\n      redirectLogin: true,\n    });\n  }\n\n  goToRanking = () => {\n    this.setState({\n      redirectRanking: true,\n    });\n  }\n\n  render() {\n    const { correctAnswers, totalScore } = this.props;\n    const { redirectLogin, redirectRanking } = this.state;\n    const PASSING_SCORE = 3;\n    return (\n      <div className=\"gameboard-container\">\n        <HeaderPlay />\n        <div className=\"main-container\">\n          <h2 data-testid=\"feedback-text\">\n            {correctAnswers < PASSING_SCORE\n              ? <>Could be better...</>\n              : <>Well Done!</>}\n          </h2>\n\n          <p>\n            You got\n            {' '}\n            <strong\n              data-testid=\"feedback-total-question\"\n            >\n              {correctAnswers}\n            </strong>\n            {' '}\n            questions right.\n          </p>\n          <h3>\n            Total Score:\n            {' '}\n            <strong\n              data-testid=\"feedback-total-score\"\n            >\n              {totalScore}\n            </strong>\n          </h3>\n          <div className=\"general-buttons\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-play-again\"\n              onClick={ this.playAgain }\n            >\n              Play Again\n            </button>\n            <button\n              type=\"button\"\n              data-testid=\"btn-ranking\"\n              onClick={ this.goToRanking }\n            >\n              Ranking\n            </button>\n          </div>\n          { redirectLogin && <Redirect to=\"/\" /> }\n          { redirectRanking && <Redirect to=\"/ranking\" /> }\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  correctAnswers: state.player.assertions,\n  totalScore: state.player.score,\n  name: state.player.name,\n  image: state.player.gravatarEmail,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetToken: () => dispatch(actionResetToken()),\n  resetQuestions: () => dispatch(actionResetQuestions()),\n  resetScore: () => dispatch(actionResetScore()),\n});\n\nFeedback.propTypes = {\n  correctAnswers: PropTypes.number,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport {\n  actionResetToken,\n  actionResetQuestions,\n  actionResetScore } from '../redux/actions';\n\nclass Ranking extends Component {\n  constructor() {\n    super();\n    this.state = {\n      redirectLogin: false,\n      infoRanking: [],\n    };\n  }\n\n  componentDidMount() {\n    this.loadingFinalRanking();\n  }\n\n  loadingFinalRanking = () => {\n    const recoverRanking = JSON.parse(localStorage.getItem('ranking'));\n    recoverRanking.sort((a, b) => b.totalScore - a.totalScore);\n    this.setState({\n      infoRanking: recoverRanking,\n    });\n  };\n\n  resetStore = () => {\n    const { resetToken, resetQuestions, resetScore } = this.props;\n    resetToken();\n    resetQuestions();\n    resetScore();\n  }\n\n  playAgain = () => {\n    this.resetStore();\n    this.setState({\n      redirectLogin: true,\n    });\n  }\n\n  render() {\n    const { redirectLogin, infoRanking } = this.state;\n    return (\n      <div className=\"gameboard-container\">\n        <h1\n          data-testid=\"ranking-title\"\n          className=\"headerplay-container\"\n        >\n          Ranking\n        </h1>\n        <ol className=\"main-container general-buttons\">\n          {\n            infoRanking.map(({ image, name, totalScore }, index) => (\n              <li key={ index }>\n                <img\n                  data-testid=\"input-gravatar-email\"\n                  src={ image }\n                  alt={ `${name} - Avatar` }\n                />\n                <span\n                  className=\"name-ranking\"\n                  data-testid={ `player-name-${index}` }\n                >\n                  { name }\n                </span>\n                <strong\n                  className=\"score-ranking\"\n                  data-testid={ `player-score-${index}` }\n                >\n                  { totalScore }\n                </strong>\n              </li>\n            ))\n          }\n          <button\n            type=\"button\"\n            data-testid=\"btn-go-home\"\n            onClick={ this.playAgain }\n          >\n            Play Again\n          </button>\n        </ol>\n        {redirectLogin && <Redirect to=\"/\" />}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetToken: () => dispatch(actionResetToken()),\n  resetQuestions: () => dispatch(actionResetQuestions()),\n  resetScore: () => dispatch(actionResetScore()),\n});\n\nRanking.propTypes = {\n  resetToken: PropTypes.func,\n  resetQuestions: PropTypes.func,\n  resetScore: PropTypes.func,\n}.isRequired;\n\nexport default connect(null, mapDispatchToProps)(Ranking);\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Login from './pages/Login';\nimport GameBoard from './pages/GameBoard';\nimport Settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nimport './styles/general.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/gameboard\" component={ GameBoard } />\n        <Route exact path=\"/settings\" component={ Settings } />\n        <Route exact path=\"/feedback\" component={ Feedback } />\n        <Route exact path=\"/ranking\" component={ Ranking } />\n        <Route exact path=\"/\" component={ Login } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from './redux/store';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter basename=\"trybe-project-trivia\">\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}